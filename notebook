{"nbformat":4,"nbformat_minor":0,"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.8"},"nav_menu":{},"toc":{"navigate_menu":true,"number_sections":true,"sideBar":true,"threshold":6,"toc_cell":false,"toc_section_display":"block","toc_window_display":false},"colab":{"name":"dkt9nv_codeathon_2","provenance":[{"file_id":"1UmH5g1blTBAM9mFZLWWE7hHevGL447z_","timestamp":1582834547419},{"file_id":"https://github.com/ageron/handson-ml2/blob/master/03_classification.ipynb","timestamp":1566876855427}],"collapsed_sections":[]}},"cells":[{"cell_type":"markdown","metadata":{"id":"8sUuTu-9I1-c","colab_type":"text"},"source":["# Imports and Setup"]},{"cell_type":"code","metadata":{"id":"ql42XkEYI1-e","colab_type":"code","colab":{}},"source":["import numpy as np\n","np.random.seed(42)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"MUZyvbZQI1-g","colab_type":"text"},"source":["Retrieving MNIST Data"]},{"cell_type":"code","metadata":{"id":"IyU4VyOII1-h","colab_type":"code","colab":{}},"source":["from sklearn.datasets import fetch_openml\n","from sklearn.model_selection import train_test_split\n","\n","mnist = fetch_openml('mnist_784', version=1)\n","X, y = mnist[\"data\"], mnist[\"target\"]"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"_5pd7o-Avcla","colab_type":"text"},"source":["Pipeline (really just Normalizer)\n"]},{"cell_type":"code","metadata":{"id":"FyDaoKyavsYL","colab_type":"code","colab":{}},"source":["from sklearn.preprocessing import Normalizer\n","\n","transformer = Normalizer().fit(X, y)\n","transformer.transform(X)\n","\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=42, stratify=y, shuffle=True)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"u83nWIbvbi-x","colab_type":"text"},"source":["# Hypertuning"]},{"cell_type":"markdown","metadata":{"id":"dXFVGWs7NvIz","colab_type":"text"},"source":["At first, I tested whether rbf or polynomial was better. My thought was to use a greedy approach: test both poly and rbf, and hypertune the one that performed better using the default parameters. Rbf performed a lot better, so I started hypertuning that."]},{"cell_type":"code","metadata":{"id":"Cq3eTdDvbod5","colab_type":"code","colab":{}},"source":["from sklearn.svm import SVC\n","from sklearn.model_selection import RandomizedSearchCV\n","from scipy.stats import uniform, reciprocal\n","\n","# I disconnected from the runtime, and there is no reason to run this code again.\n","\n","#param_dist_1 = {\"kernel\":['poly', 'rbf']}\n","#grid_search = GridSearchCV(SVC(), param_dist_1, verbose=4, cv=3)\n","#X_train_sample, y_train_sample = X_train[:int(len(X_train)*.05)], y_train[:int(len(y_train)*.05)]\n","#grid_search.fit(X_train_sample, y_train_sample)\n","#grid_search.best_estimator_.get_params"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"1eKKrBhPtAtC","colab_type":"text"},"source":["Later, I found out that rbf is really bad. Someone on Piazza mentioned that polynomial is way better and way faster. I tried it and it went a lot better. Some of my old rbf code was scrapped, while the rest I re-used and modified for polynomial."]},{"cell_type":"markdown","metadata":{"id":"OPbelwsyOWVs","colab_type":"text"},"source":["I am only hypertuning on a small subset of the dataset, otherwise, it would take too long."]},{"cell_type":"code","metadata":{"id":"auBPtW6QOUe3","colab_type":"code","colab":{}},"source":["X_train_sample, y_train_sample = X_train[:int(len(X_train)*.05)], y_train[:int(len(y_train)*.05)] # training on 5%"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"wQ11TPYus_Dj","colab_type":"code","outputId":"14c1508c-5508-413b-d951-8b6b6ff8a177","executionInfo":{"status":"ok","timestamp":1583186806518,"user_tz":300,"elapsed":953902,"user":{"displayName":"Drew Tada","photoUrl":"","userId":"06168269638218852463"}},"colab":{"base_uri":"https://localhost:8080/","height":294}},"source":["param_dist = {\"degree\": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12], \"C\": uniform(1, 20)} # increase degree\n","clf = SVC(probability=True, kernel='poly', random_state=42)\n","random_search = RandomizedSearchCV(clf, param_dist, verbose=1, random_state=42, cv=3)\n","random_search.fit(X_train_sample, y_train_sample)"],"execution_count":6,"outputs":[{"output_type":"stream","text":["Fitting 3 folds for each of 10 candidates, totalling 30 fits\n"],"name":"stdout"},{"output_type":"stream","text":["[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n","[Parallel(n_jobs=1)]: Done  30 out of  30 | elapsed: 14.8min finished\n"],"name":"stderr"},{"output_type":"execute_result","data":{"text/plain":["RandomizedSearchCV(cv=3, error_score=nan,\n","                   estimator=SVC(C=1.0, break_ties=False, cache_size=200,\n","                                 class_weight=None, coef0=0.0,\n","                                 decision_function_shape='ovr', degree=3,\n","                                 gamma='scale', kernel='poly', max_iter=-1,\n","                                 probability=True, random_state=42,\n","                                 shrinking=True, tol=0.001, verbose=False),\n","                   iid='deprecated', n_iter=10, n_jobs=None,\n","                   param_distributions={'C': <scipy.stats._distn_infrastructure.rv_frozen object at 0x7fe8a82f5c18>,\n","                                        'degree': [3, 4, 5, 6, 7, 8, 9, 10, 11,\n","                                                   12]},\n","                   pre_dispatch='2*n_jobs', random_state=42, refit=True,\n","                   return_train_score=False, scoring=None, verbose=1)"]},"metadata":{"tags":[]},"execution_count":6}]},{"cell_type":"code","metadata":{"id":"PvMJEhlAfhVl","colab_type":"code","outputId":"3d436422-57f0-4d63-d5f0-b3d74b8cce44","executionInfo":{"status":"ok","timestamp":1583186881674,"user_tz":300,"elapsed":1029049,"user":{"displayName":"Drew Tada","photoUrl":"","userId":"06168269638218852463"}},"colab":{"base_uri":"https://localhost:8080/","height":207}},"source":["from sklearn.model_selection import cross_val_score, cross_validate\n","cross_val_score(random_search.best_estimator_, X_train_sample, y_train_sample, cv=3, verbose=3, scoring=\"accuracy\")"],"execution_count":7,"outputs":[{"output_type":"stream","text":["[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n"],"name":"stderr"},{"output_type":"stream","text":["[CV]  ................................................................\n","[CV] .................................... , score=0.738, total=  24.8s\n","[CV]  ................................................................\n"],"name":"stdout"},{"output_type":"stream","text":["[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   24.8s remaining:    0.0s\n"],"name":"stderr"},{"output_type":"stream","text":["[CV] .................................... , score=0.693, total=  24.9s\n","[CV]  ................................................................\n"],"name":"stdout"},{"output_type":"stream","text":["[Parallel(n_jobs=1)]: Done   2 out of   2 | elapsed:   49.7s remaining:    0.0s\n"],"name":"stderr"},{"output_type":"stream","text":["[CV] .................................... , score=0.744, total=  25.4s\n"],"name":"stdout"},{"output_type":"stream","text":["[Parallel(n_jobs=1)]: Done   3 out of   3 | elapsed:  1.3min finished\n"],"name":"stderr"},{"output_type":"execute_result","data":{"text/plain":["array([0.73809524, 0.69333333, 0.74380952])"]},"metadata":{"tags":[]},"execution_count":7}]},{"cell_type":"markdown","metadata":{"id":"Pb9SnQFJUIsP","colab_type":"text"},"source":["My model didn't perform well at all during cross validation, but I thought that maybe given more training data, it would do well."]},{"cell_type":"code","metadata":{"id":"NAqhLjUjA8ux","colab_type":"code","outputId":"18c21dca-2f67-4412-c40c-4771e4cb11c1","executionInfo":{"status":"ok","timestamp":1583186881676,"user_tz":300,"elapsed":1029047,"user":{"displayName":"Drew Tada","photoUrl":"","userId":"06168269638218852463"}},"colab":{"base_uri":"https://localhost:8080/","height":106}},"source":["random_search.best_estimator_.get_params"],"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<bound method BaseEstimator.get_params of SVC(C=17.648852816008436, break_ties=False, cache_size=200, class_weight=None,\n","    coef0=0.0, decision_function_shape='ovr', degree=8, gamma='scale',\n","    kernel='poly', max_iter=-1, probability=True, random_state=42,\n","    shrinking=True, tol=0.001, verbose=False)>"]},"metadata":{"tags":[]},"execution_count":8}]},{"cell_type":"markdown","metadata":{"id":"5WT5q-UbnoRf","colab_type":"text"},"source":["Best Parameters are : C = 17.648852816008436, Degree = 8"]},{"cell_type":"markdown","metadata":{"id":"GYGSB1SN0u63","colab_type":"text"},"source":["# Training Hypertuned Model"]},{"cell_type":"code","metadata":{"id":"DZVwJi5Gn9-M","colab_type":"code","colab":{}},"source":["new_best_model = SVC(C=17.648852816008436, degree=8).fit(X_train, y_train) # using the whole training set"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"DCdZoD5cZdlD","colab_type":"text"},"source":["# Evaluation"]},{"cell_type":"code","metadata":{"id":"4NpkK7xKat_1","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"a79a7ede-acf9-410a-8ab8-fca495d8eaec","executionInfo":{"status":"ok","timestamp":1583187564130,"user_tz":300,"elapsed":1711490,"user":{"displayName":"Drew Tada","photoUrl":"","userId":"06168269638218852463"}}},"source":["from sklearn.metrics import accuracy_score\n","accuracy_score(new_best_model.predict(X_test), y_test)"],"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.9831428571428571"]},"metadata":{"tags":[]},"execution_count":10}]}]}